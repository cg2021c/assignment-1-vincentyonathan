const canvas = document.querySelector("canvas");
const gl = canvas.getContext("webgl");

if (!gl) {
  throw new Error("WebGL not supported");
}

function randomColor() {
  return [Math.random(), Math.random(), Math.random()];
}

let cubeVertex = [
  // Front
  0.05, 0.05, 0.05, 1, 1, 1 , 0, 0 , -1,
  0.05, -0.05, 0.05, 1, 1, 1 , 0, 0 , -1,
  -0.05, 0.05, 0.05, 1, 1, 1 , 0, 0 , -1,
  -0.05, 0.05, 0.05, 1, 1, 1 , 0, 0 , -1,
  0.05, -0.05, 0.05, 1, 1, 1 , 0, 0 , -1,
  -0.05, -0.05, 0.05, 1, 1, 1 , 0, 0 , -1,

  // Left
  -0.05, 0.05, 0.05, 1, 1, 1 , 1, 0 , 0,
  -0.05, -0.05, 0.05, 1, 1, 1 , 1, 0 , 0,
  -0.05, 0.05, -0.05, 1, 1, 1 , 1, 0 , 0,
  -0.05, 0.05, -0.05, 1, 1, 1 , 1, 0 , 0,
  -0.05, -0.05, 0.05, 1, 1, 1 , 1, 0 , 0,
  -0.05, -0.05, -0.05, 1, 1, 1 , 1, 0 , 0,

  // Back
  -0.05, 0.05, -0.05, 1, 1, 1 , 0, 0, 1,
  -0.05, -0.05, -0.05, 1, 1, 1 , 0, 0, 1,
  0.05, 0.05, -0.05, 1, 1, 1 , 0, 0, 1,
  0.05, 0.05, -0.05, 1, 1, 1 , 0, 0, 1,
  -0.05, -0.05, -0.05, 1, 1, 1 , 0, 0, 1,
  0.05, -0.05, -0.05, 1, 1, 1 , 0, 0, 1,

  // Right
  0.05, 0.05, -0.05, 1, 1, 1 , -1, 0 ,0 ,
  0.05, -0.05, -0.05, 1, 1, 1 , -1, 0 ,0 ,
  0.05, 0.05, 0.05, 1, 1, 1 , -1, 0 ,0 ,
  0.05, 0.05, 0.05, 1, 1, 1 , -1, 0 ,0 ,
  0.05, -0.05, 0.05, 1, 1, 1 , -1, 0 ,0 ,
  0.05, -0.05, -0.05, 1, 1, 1 , -1, 0 ,0 ,

  // up
  0.05, 0.05, 0.05, 1, 1, 1 , 0, -1, 0,
  0.05, 0.05, -0.05, 1, 1, 1 , 0, -1, 0,
  -0.05, 0.05, 0.05, 1, 1, 1 , 0, -1, 0,
  -0.05, 0.05, 0.05, 1, 1, 1 , 0, -1, 0,
  0.05, 0.05, -0.05, 1, 1, 1 , 0, -1, 0,
  -0.05, 0.05, -0.05, 1, 1, 1 , 0, -1, 0,

  // Bottom
  0.05, -0.05, 0.05, 1, 1, 1 , 0, 1, 0,
  0.05, -0.05, -0.05, 1, 1, 1 , 0, 1, 0,
  -0.05, -0.05, 0.05, 1, 1, 1 , 0, 1, 0,
  -0.05, -0.05, 0.05, 1, 1, 1 , 0, 1, 0,
  0.05, -0.05, -0.05, 1, 1, 1 , 0, 1, 0,
  -0.05, -0.05, -0.05, 1, 1, 1 , 0, 1, 0,
];

let vertexDataMetal = [
//Sebelah Kanan
    //Body Utama - Hitam
    0.256, 0.180, -0.358,  0, 0, 0 , 0, 0, -1,
    0.256, -0.234, -0.358, 0, 0, 0 , 0, 0, -1,
    0.908, -0.234, -0.358, 0, 0, 0 , 0, 0, -1,
    0.908, -0.234, -0.358, 0, 0, 0 , 0, 0, -1,
    0.908, 0.180, -0.358,  0, 0, 0 , 0, 0, -1,
    0.256, 0.180, -0.358,  0, 0, 0 , 0, 0, -1,

    //Body Utama- Kiri
    0.256, 0.180, -0.358,  0, 0, 0 , -1, 0, 0,
    0.256, -0.234, -0.358, 0, 0, 0 , -1, 0, 0,
    0.256, -0.234, -0.500, 0, 0, 0 , -1, 0, 0,
    0.256, -0.234, -0.500, 0, 0, 0 , -1, 0, 0,
    0.256, 0.180, -0.500,  0, 0, 0 , -1, 0, 0,
    0.256, 0.180, -0.358,  0, 0, 0 , -1, 0, 0,

    //Body Utama- Kanan
    0.908, 0.180 , -0.358, 0, 0, 0, 1, 0, 0,
    0.908, -0.234, -0.358, 0, 0, 0, 1, 0, 0,
    0.908, -0.234, -0.500, 0, 0, 0, 1, 0, 0,
    0.908, -0.234, -0.500, 0, 0, 0, 1, 0, 0,
    0.908, 0.180, -0.500, 0, 0, 0, 1, 0, 0,
    0.908, 0.180 , -0.358, 0, 0, 0, 1, 0, 0,

    //Body Utama - Tutup Atas
    0.908, 0.180 , -0.358, 0, 0, 0,0,1,0,
    0.908, 0.180, -0.500, 0, 0, 0,0,1,0,
    0.256, 0.180, -0.500,  0, 0, 0 , 0,1,0,
    0.256, 0.180, -0.500,  0, 0, 0 , 0,1,0,
    0.256, 0.180, -0.358,  0, 0, 0 , 0,1,0,
    0.908, 0.180 , -0.358, 0, 0, 0,0,1,0,

    //Body Utama - Tutup Bawah
    0.908, -0.234, -0.358, 0, 0, 0, 0, -1, 0,
    0.908, -0.234, -0.500, 0, 0, 0, 0, -1, 0,
    0.256, -0.235, -0.500, 0, 0, 0, 0, -1, 0,
    0.256, -0.235, -0.500, 0, 0, 0, 0, -1, 0,
    0.256, -0.234, -0.358, 0, 0, 0 , -1, 0, 0,
    0.908, -0.234, -0.358, 0, 0, 0, 0, -1, 0,

    //Plane
    10, -0.400, 10, 0.09, 0.38, 0.52, 0, 1, 0,
    10, -0.400, -10, 0.09, 0.38, 0.52, 0, 1, 0,
    -10, -0.400, 10, 0.09, 0.38, 0.52, 0, 1, 0,
    -10, -0.400, -10, 0.09, 0.38, 0.52, 0, 1, 0,
    10, -0.400, -10, 0.09, 0.38, 0.52, 0, 1, 0,
    -10, -0.400, 10, 0.09, 0.38, 0.52, 0, 1, 0,

    //Body Utama - Tutup Depan
    0.256, 0.180, -0.500, 0, 0, 0, 0, 0, -1,
    0.256, -0.234, -0.500, 0, 0, 0, 0, 0, -1,
    0.908, -0.234, -0.500, 0, 0, 0, 0, 0, -1,
    0.908, -0.234, -0.500, 0, 0, 0, 0, 0, -1,
    0.908, 0.180, -0.500, 0, 0, 0, 0, 0, -1,
    0.256, 0.180, -0.500, 0, 0, 0, 0, 0, -1,

    
    //Right - Back Facing
    0.313, 0.152, -0.357 , 1, 1, 1, 0 , 0, -1,
    0.313, -0.206 ,-0.357 , 1, 1, 1, 0 , 0, -1,
    0.870, -0.206 ,-0.354 , 1, 1, 1, 0 , 0, -1,
    0.870,  -0.206 ,-0.354 , 1, 1, 1, 0 , 0, -1,
    0.870 ,0.152 , -0.354 ,1, 1, 1, 0 , 0, -1,
    0.313, 0.152 ,-0.357 , 1, 1, 1, 0 , 0, -1,

    //Kiri Samping
    0.313, 0.152 , -0.357 , 1, 1, 1, -1 , 0, 0,
    0.313, -0.206  ,-0.357 ,  1, 1, 1, -1 , 0, 0,
    0.313, -0.206, -0.317  ,1, 1, 1, -1 , 0, 0,
    0.313, -0.206  ,-0.317 , 1, 1, 1, -1 , 0, 0,
    0.313,  0.152  ,-0.317 ,1, 1, 1, -1 , 0, 0,
    0.313,  0.152  ,-0.357 ,1, 1, 1, -1 , 0, 0,

    //Samping Kanan
     0.870, 0.152,-0.354 , 1, 1, 1, 1, 0, 0,
     0.870,  -0.206 ,-0.354, 1, 1, 1, 1, 0, 0,
     0.871, -0.206 ,-0.314, 1, 1, 1, 1, 0, 0,
     0.871, -0.206 ,-0.314, 1, 1, 1, 1, 0, 0,
     0.871, 0.152 ,-0.314, 1, 1, 1, 1, 0, 0,
     0.870, 0.152 ,-0.354, 1, 1, 1, 1, 0, 0,
    
     //Tutup Atas
     0.313, 0.152 ,-0.357, 1, 1, 1 , 1, 1, 0,
     0.870, 0.152 ,-0.354, 1, 1, 1 , 1, 1, 0,
     0.870, 0.152 ,-0.314, 1, 1, 1 , 1, 1, 0,
     0.870, 0.152 ,-0.314, 1, 1, 1 , 1, 1, 0,
     0.313, 0.152 ,-0.317, 1, 1, 1 , 1, 1, 0,
     0.313, 0.152 ,-0.357, 1, 1, 1 , 1, 1, 0,

     //Tutup Bawah
     0.313, -0.206, -0.357, 1, 1, 1 , 0, -1, 0,
     0.313, -0.206, -0.317, 1, 1, 1 , 0, -1, 0,
     0.871, -0.206, -0.314, 1, 1, 1 , 0, -1, 0,
     0.871, -0.206, -0.314, 1, 1, 1 , 0, -1, 0,
     0.870, -0.206, -0.354, 1, 1, 1 , 0, -1, 0,
     0.313, -0.206, -0.357, 1, 1, 1 , 0, -1, 0,

     //Tutup Belakang
     0.871,  0.152, -0.314, 1, 1, 1, 0, 0, 1,
     0.871, -0.206, -0.314, 1, 1, 1, 0, 0, 1,
     0.313, -0.206, -0.317, 1, 1, 1, 0, 0, 1,
     0.313, -0.206, -0.317, 1, 1, 1, 0, 0, 1,
     0.313,  0.152, -0.317, 1, 1, 1, 0, 0, 1,
     0.871,  0.152, -0.314, 1, 1, 1, 0, 0, 1,

    //Tabung Lensa
    //Titik Tengah
    0.524, 0.110, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.493, 0.107, -0.600, 1, 1, 1, 0, 0, -1,
    0.493, 0.107, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.464, 0.099, -0.600, 1, 1, 1, 0, 0, -1,
    0.464, 0.099, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.437, 0.086, -0.600, 1, 1, 1, 0, 0, -1,
    0.437, 0.086, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.413, 0.069, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.413, 0.069, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.394, 0.048, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.394, 0.048, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.379, 0.023, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.379, 0.023, -0.600, 1, 1, 1 ,0 ,0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.370, -0.002, -0.600, 1, 1, 1, 0, 0, -1,
    0.370, -0.002, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    
    0.367, -0.030, -0.600, 1, 1, 1, 0, 0, -1,
    0.367, -0.030, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.370, -0.057, -0.600, 1, 1, 1, 0, 0, -1,
    0.370, -0.057, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.379, -0.083, -0.600, 1, 1, 1, 0, 0, -1,
    0.379, -0.083, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.394, -0.108, -0.600, 1, 1, 1, 0, 0, -1,
    0.394, -0.108, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.413, -0.129, -0.600, 1, 1, 1, 0, 0, -1,
    0.413, -0.129, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.437, -0.147, -0.600, 1, 1, 1, 0, 0, -1,
    0.437, -0.147, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.46, -0.160, -0.600, 1, 1, 1, 0, 0, -1,
    0.46, -0.160, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.493, -0.168, -0.600, 1, 1, 1, 0, 0, -1,
    0.493, -0.168, -0.600, 1, 1, 1, 0, 0, -1,
    
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.524, -0.171, -0.600, 1, 1, 1, 0, 0, -1,
    0.524, -0.171, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.554, -0.168, -0.600, 1, 1, 1, 0, 0, -1,
    0.554, -0.168, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.584, -0.160, -0.600, 1, 1, 1, 0, 0, -1,
    0.584, -0.160, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.611, -0.147, -0.600, 1, 1, 1, 0, 0, -1,
    0.611, -0.147, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.635, -0.129, -0.600, 1, 1, 1, 0, 0, -1,
    0.635, -0.129, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.6693, -0.084, -0.600, 1, 1, 1, 0, 0, -1,
    0.6693, -0.084, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.678, -0.057, -0.600, 1, 1, 1, 0, 0, -1,
    0.678, -0.057, -0.600, 1, 1, 1, 0, 0, -1,
  
    
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.681, -0.030, -0.600, 1, 1, 1, 0, 0, -1,
    0.681, -0.030, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.678, -0.002, -0.600, 1, 1, 1, 0, 0, -1,
    0.678, -0.002, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.669, 0.023, -0.600, 1, 1, 1, 0, 0, -1,
    0.669, 0.023, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.654, 0.047, -0.600, 1, 1, 1, 0, 0, -1,
    0.654, 0.047, -0.600, 1, 1, 1, 0, 0, -1,

    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.635, 0.069, -0.600, 1, 1, 1, 0, 0, -1,
    0.635, 0.069, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.611, 0.086, -0.600, 1, 1, 1, 0, 0, -1,
    0.611, 0.086, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.584, 0.099, -0.600, 1, 1, 1, 0, 0, -1,
    0.584, 0.099, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.555, 0.107, -0.600, 1, 1, 1, 0, 0, -1,
    0.555, 0.107, -0.600, 1, 1, 1, 0, 0, -1,
    0.400, -0.0305, -0.600, 1, 1, 1, 0, 0, -1,
    0.524, 0.110, -0.600, 1, 1, 1 ,0 ,0, -1,

    //Panjang Lensa
    0.524, 0.110, -0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.493, 0.107, -0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.493, 0.107, -0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.493, 0.107, -0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.524, 0.110, -0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.524, 0.110, -0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.493, 0.107, -0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.464, 0.099,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.464, 0.099,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.464, 0.099, -0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.493, 0.107,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.493, 0.107,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.464, 0.099,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.437, 0.086,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.437, 0.086,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.437, 0.086,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.464, 0.099,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.464, 0.099,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.437, 0.086,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.413, 0.069,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.413, 0.069,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.413, 0.069,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.437, 0.086,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.437, 0.086,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.413, 0.069,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.394, 0.048,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.394, 0.048,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.394, 0.048,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.413, 0.069,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.413, 0.069,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.394, 0.048,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.379, 0.023,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.379, 0.023,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.379, 0.023,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.394, 0.048,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.394, 0.048,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.379, 0.023,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.370, -0.002,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.370, -0.002,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.370, -0.002,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.379, 0.023,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.379, 0.023,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.370, -0.002,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.367, -0.030,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.367, -0.030,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.367, -0.030,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.370, -0.002,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.370, -0.002,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.367, -0.030,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.370, -0.057,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.370, -0.057,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.370, -0.057,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.367, -0.030,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.367, -0.030,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.370, -0.057,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.379, -0.083,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.379, -0.083,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.379, -0.083,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.370, -0.057,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.370, -0.057,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.379, -0.083,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.394, -0.108,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.394, -0.108,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.394, -0.108,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.379, -0.083,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.379, -0.083,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.394, -0.108,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.413, -0.129,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.413, -0.129,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.413, -0.129,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.394, -0.108,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.394, -0.108,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.413, -0.129,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.437, -0.147,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.437, -0.147,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.437, -0.147,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.413, -0.129,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.413, -0.129,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.437, -0.147,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.46, -0.160,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.46, -0.160,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.46, -0.160,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.437, -0.147,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.437, -0.147,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.46, -0.160,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.493, -0.168,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.493, -0.168,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.493, -0.168,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.46, -0.160,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.46, -0.160,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.493, -0.168,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.524, -0.171,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.524, -0.171,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.524, -0.171,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.493, -0.168,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.493, -0.168,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.524, -0.171,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.554, -0.168,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.554, -0.168,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.554, -0.168,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.524, -0.171,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.524, -0.171,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.554, -0.168,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.584, -0.160,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.584, -0.160,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.584, -0.160,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.554, -0.168,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.554, -0.168,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.584, -0.160,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.611, -0.147,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.611, -0.147,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.611, -0.147,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.584, -0.160,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.584, -0.160,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.611, -0.147,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.635, -0.129,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.635, -0.129,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.635, -0.129,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.611, -0.147,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.611, -0.147,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.635, -0.129,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.6693, -0.084,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.6693, -0.084,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.6693, -0.084,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.635, -0.129,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.635, -0.129,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.6693, -0.084,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.678, -0.057,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.678, -0.057,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.678, -0.057,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.6693, -0.084,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.6693, -0.084,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.678, -0.057,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.681, -0.030,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.681, -0.030,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.681, -0.030,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.678, -0.057,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.678, -0.057,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.681, -0.030,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.678, -0.002,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.678, -0.002,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.678, -0.002,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.681, -0.030,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.681, -0.030,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.678, -0.002,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.669, 0.023,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.669, 0.023,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.669, 0.023,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.678, -0.002,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.678, -0.002,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.669, 0.023,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.654, 0.047,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.654, 0.047,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.654, 0.047,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.669, 0.023,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.669, 0.023,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.654, 0.047,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.635, 0.069,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.635, 0.069,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.635, 0.069,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.654, 0.047,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.654, 0.047,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.635, 0.069,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.611, 0.086,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.611, 0.086,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.611, 0.086,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.635, 0.069,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.635, 0.069,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.611, 0.086,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.584, 0.099,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.584, 0.099,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.584, 0.099,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.611, 0.086,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.611, 0.086,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.584, 0.099,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.555, 0.107,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.555, 0.107,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.555, 0.107,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.584, 0.099,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.584, 0.099,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,

    0.555, 0.107,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.524, 0.110,-0.600, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.524, 0.110,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.524, 0.110,-0.500, 0.2, 0.2, 0.2 ,0 ,1, 0,
    0.555, 0.107,-0.500, 0.2, 0.2, 0.2, 0 , 1 , 0,
    0.555, 0.107,-0.600, 0.2, 0.2, 0.2, 0 , 1 , 0,
];

vertexData = [
    //Sebelah Kiri
    //Body Utama - Hitam
    -0.256, 0.180, -0.216,  0, 0, 0 , 0, 0, -1,
    -0.256, -0.234, -0.216, 0, 0, 0 , 0, 0, -1,
    -0.908, -0.234, -0.216, 0, 0, 0 , 0, 0, -1,
    -0.908, -0.234, -0.216, 0, 0, 0 , 0, 0, -1,
    -0.908, 0.180, -0.216,  0, 0, 0 , 0, 0, -1,
    -0.256, 0.180, -0.216,  0, 0, 0 , 0, 0, -1,

    //Body Utama- Kiri
    -0.256, 0.180, -0.216,  0, 0, 0 , -1, 0, 0,
    -0.256, -0.234, -0.216, 0, 0, 0 , -1, 0, 0,
    -0.256, -0.234, -0.358, 0, 0, 0 , -1, 0, 0,
    -0.256, -0.234, -0.358, 0, 0, 0 , -1, 0, 0,
    -0.256, 0.180, -0.358,  0, 0, 0 , -1, 0, 0,
    -0.256, 0.180, -0.216,  0, 0, 0 , -1, 0, 0,

    //Body Utama- Kanan
    -0.908, 0.180 , -0.216, 0, 0, 0, 1, 0, 0,
    -0.908, -0.234, -0.216, 0, 0, 0, 1, 0, 0,
    -0.908, -0.234, -0.358, 0, 0, 0, 1, 0, 0,
    -0.908, -0.234, -0.358, 0, 0, 0, 1, 0, 0,
    -0.908, 0.180, -0.358, 0, 0, 0, 1, 0, 0,
    -0.908, 0.180 , -0.216, 0, 0, 0, 1, 0, 0,

    //Body Utama - Tutup Atas
    -0.908, 0.180 , -0.216, 0, 0, 0,0,1,0,
    -0.908, 0.180, -0.358, 0, 0, 0,0,1,0,
    -0.256, 0.180, -0.358,  0, 0, 0 , 0,1,0,
    -0.256, 0.180, -0.358,  0, 0, 0 , 0,1,0,
    -0.256, 0.180, -0.216,  0, 0, 0 , 0,1,0,
    -0.908, 0.180 , -0.216, 0, 0, 0,0,1,0,

    //Body Utama - Tutup Bawah
    -0.908, -0.234, -0.216, 0, 0, 0, 0, -1, 0,
    -0.908, -0.234, -0.358, 0, 0, 0, 0, -1, 0,
    -0.256, -0.235, -0.358, 0, 0, 0, 0, -1, 0,
    -0.256, -0.235, -0.358, 0, 0, 0, 0, -1, 0,
    -0.256, -0.234, -0.216, 0, 0, 0 , -1, 0, 0,
    -0.908, -0.234, -0.216, 0, 0, 0, 0, -1, 0,

    //Body Utama - Tutup Depan
    -0.256, 0.180, -0.358, 0, 0, 0, 0, 0, -1,
    -0.256, -0.234, -0.358, 0, 0, 0, 0, 0, -1,
    -0.908, -0.234, -0.358, 0, 0, 0, 0, 0, -1,
    -0.908, -0.234, -0.358, 0, 0, 0, 0, 0, -1,
    -0.908, 0.180, -0.358, 0, 0, 0, 0, 0, -1,
    -0.256, 0.180, -0.358, 0, 0, 0, 0, 0, -1,

    //Bagian Putih
    //Right - Back Facing
    -0.313, 0.152, -0.359 , 1, 1, 1, 0 , 0, -1,
    -0.313, -0.206 ,-0.359 , 1, 1, 1, 0 , 0, -1,
    -0.870, -0.206 ,-0.400 , 1, 1, 1, 0 , 0, -1,
    -0.870,  -0.206 ,-0.400 , 1, 1, 1, 0 , 0, -1,
    -0.870 ,0.152 , -0.400 ,1, 1, 1, 0 , 0, -1,
    -0.313, 0.152 ,-0.359 , 1, 1, 1, 0 , 0, -1,

    //Kiri Samping
    -0.313, 0.152 , -0.359 , 1, 1, 1, -1 , 0, 0,
    -0.313, -0.206  ,-0.359 ,  1, 1, 1, -1 , 0, 0,
    -0.313, -0.206, -0.360  ,1, 1, 1, -1 , 0, 0,
    -0.313, -0.206  ,-0.360 , 1, 1, 1, -1 , 0, 0,
    -0.313,  0.152  ,-0.360 ,1, 1, 1, -1 , 0, 0,
    -0.313,  0.152  ,-0.359 ,1, 1, 1, -1 , 0, 0,

    //Samping Kanan
      -0.870, 0.152,-0.400 , 1, 1, 1, 1, 0, 0,
      -0.870,  -0.206 ,-0.400, 1, 1, 1, 1, 0, 0,
      -0.871, -0.206 ,-0.319, 1, 1, 1, 1, 0, 0,
      -0.871, -0.206 ,-0.319, 1, 1, 1, 1, 0, 0,
      -0.871, 0.152 ,-0.319, 1, 1, 1, 1, 0, 0,
      -0.870, 0.152 ,-0.400, 1, 1, 1, 1, 0, 0,
    
      //Tutup Atas
      -0.313, 0.152 ,-0.359, 1, 1, 1 , 1, 1, 0,
      -0.870, 0.152 ,-0.400, 1, 1, 1 , 1, 1, 0,
      -0.870, 0.152 ,-0.319, 1, 1, 1 , 1, 1, 0,
      -0.870, 0.152 ,-0.319, 1, 1, 1 , 1, 1, 0,
      -0.313, 0.152 ,-0.360, 1, 1, 1 , 1, 1, 0,
      -0.313, 0.152 ,-0.359, 1, 1, 1 , 1, 1, 0,

      //Tutup Bawah
      -0.313, -0.206, -0.359, 1, 1, 1 , 0, -1, 0,
      -0.313, -0.206, -0.360, 1, 1, 1 , 0, -1, 0,
      -0.871, -0.206, -0.319, 1, 1, 1 , 0, -1, 0,
      -0.871, -0.206, -0.319, 1, 1, 1 , 0, -1, 0,
      -0.870, -0.206, -0.400, 1, 1, 1 , 0, -1, 0,
      -0.313, -0.206, -0.359, 1, 1, 1 , 0, -1, 0,

      //Tutup Belakang
      -0.871,  0.152, -0.319, 1, 1, 1, 0, 0, 1,
      -0.871, -0.206, -0.319, 1, 1, 1, 0, 0, 1,
      -0.313, -0.206, -0.360, 1, 1, 1, 0, 0, 1,
      -0.313, -0.206, -0.360, 1, 1, 1, 0, 0, 1,
      -0.313,  0.152, -0.360, 1, 1, 1, 0, 0, 1,
      -0.871,  0.152, -0.319, 1, 1, 1, 0, 0, 1,

      //Plane
      10, -0.400, 10, 0.09, 0.38, 0.52, 0, 1, 0,
      10, -0.400, -10, 0.09, 0.38, 0.52, 0, 1, 0,
      -10, -0.400, 10, 0.09, 0.38, 0.52, 0, 1, 0,
      -10, -0.400, -10, 0.09, 0.38, 0.52, 0, 1, 0,
      10, -0.400, -10, 0.09, 0.38, 0.52, 0, 1, 0,
      -10, -0.400, 10, 0.09, 0.38, 0.52, 0, 1, 0,

    //Tabung Lensa
    //Titik Tengah
    -0.524, 0.110, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.493, 0.107, -0.115, 1, 1, 1, 0, 0, -1,
    -0.493, 0.107, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.464, 0.099, -0.115, 1, 1, 1, 0, 0, -1,
    -0.464, 0.099, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.437, 0.086, -0.115, 1, 1, 1, 0, 0, -1,
    -0.437, 0.086, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.413, 0.069, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.413, 0.069, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.394, 0.048, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.394, 0.048, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.379, 0.023, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.379, 0.023, -0.115, 1, 1, 1 ,0 ,0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.370, -0.002, -0.115, 1, 1, 1, 0, 0, -1,
    -0.370, -0.002, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    
    -0.367, -0.030, -0.115, 1, 1, 1, 0, 0, -1,
    -0.367, -0.030, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.370, -0.057, -0.115, 1, 1, 1, 0, 0, -1,
    -0.370, -0.057, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.379, -0.083, -0.115, 1, 1, 1, 0, 0, -1,
    -0.379, -0.083, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.394, -0.108, -0.115, 1, 1, 1, 0, 0, -1,
    -0.394, -0.108, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.413, -0.129, -0.115, 1, 1, 1, 0, 0, -1,
    -0.413, -0.129, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.437, -0.147, -0.115, 1, 1, 1, 0, 0, -1,
    -0.437, -0.147, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.46, -0.160, -0.115, 1, 1, 1, 0, 0, -1,
    -0.46, -0.160, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.493, -0.168, -0.115, 1, 1, 1, 0, 0, -1,
    -0.493, -0.168, -0.115, 1, 1, 1, 0, 0, -1,
    
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.524, -0.171, -0.115, 1, 1, 1, 0, 0, -1,
    -0.524, -0.171, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.554, -0.168, -0.115, 1, 1, 1, 0, 0, -1,
    -0.554, -0.168, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.584, -0.160, -0.115, 1, 1, 1, 0, 0, -1,
    -0.584, -0.160, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.611, -0.147, -0.115, 1, 1, 1, 0, 0, -1,
    -0.611, -0.147, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.635, -0.129, -0.115, 1, 1, 1, 0, 0, -1,
    -0.635, -0.129, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.6693, -0.084, -0.115, 1, 1, 1, 0, 0, -1,
    -0.6693, -0.084, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.678, -0.057, -0.115, 1, 1, 1, 0, 0, -1,
    -0.678, -0.057, -0.115, 1, 1, 1, 0, 0, -1,

    
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.681, -0.030, -0.115, 1, 1, 1, 0, 0, -1,
    -0.681, -0.030, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.678, -0.002, -0.115, 1, 1, 1, 0, 0, -1,
    -0.678, -0.002, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.669, 0.023, -0.115, 1, 1, 1, 0, 0, -1,
    -0.669, 0.023, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.654, 0.047, -0.115, 1, 1, 1, 0, 0, -1,
    -0.654, 0.047, -0.115, 1, 1, 1, 0, 0, -1,

    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.635, 0.069, -0.115, 1, 1, 1, 0, 0, -1,
    -0.635, 0.069, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.611, 0.086, -0.115, 1, 1, 1, 0, 0, -1,
    -0.611, 0.086, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.584, 0.099, -0.115, 1, 1, 1, 0, 0, -1,
    -0.584, 0.099, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.555, 0.107, -0.115, 1, 1, 1, 0, 0, -1,
    -0.555, 0.107, -0.115, 1, 1, 1, 0, 0, -1,
    -0.400, -0.0305, -0.115, 1, 1, 1, 0, 0, -1,
    -0.524, 0.110, -0.115, 1, 1, 1 ,0 ,0, -1,

    //Panjang Lensa
    -0.524, 0.110, -0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.493, 0.107, -0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.493, 0.107, -0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.493, 0.107, -0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.524, 0.110, -0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.524, 0.110, -0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.493, 0.107, -0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.464, 0.099,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.464, 0.099,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.464, 0.099, -0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.493, 0.107,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.493, 0.107,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.464, 0.099,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.437, 0.086,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.437, 0.086,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.437, 0.086,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.464, 0.099,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.464, 0.099,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.437, 0.086,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.413, 0.069,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.413, 0.069,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.413, 0.069,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.437, 0.086,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.437, 0.086,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.413, 0.069,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.394, 0.048,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.394, 0.048,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.394, 0.048,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.413, 0.069,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.413, 0.069,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.394, 0.048,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.379, 0.023,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.379, 0.023,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.379, 0.023,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.394, 0.048,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.394, 0.048,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.379, 0.023,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.370, -0.002,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.370, -0.002,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.370, -0.002,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.379, 0.023,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.379, 0.023,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.370, -0.002,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.367, -0.030,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.367, -0.030,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.367, -0.030,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.370, -0.002,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.370, -0.002,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.367, -0.030,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.370, -0.057,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.370, -0.057,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.370, -0.057,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.367, -0.030,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.367, -0.030,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.370, -0.057,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.379, -0.083,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.379, -0.083,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.379, -0.083,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.370, -0.057,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.370, -0.057,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.379, -0.083,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.394, -0.108,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.394, -0.108,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.394, -0.108,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.379, -0.083,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.379, -0.083,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.394, -0.108,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.413, -0.129,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.413, -0.129,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.413, -0.129,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.394, -0.108,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.394, -0.108,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.413, -0.129,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.437, -0.147,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.437, -0.147,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.437, -0.147,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.413, -0.129,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.413, -0.129,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.437, -0.147,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.46, -0.160,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.46, -0.160,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.46, -0.160,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.437, -0.147,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.437, -0.147,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.46, -0.160,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.493, -0.168,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.493, -0.168,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.493, -0.168,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.46, -0.160,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.46, -0.160,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.493, -0.168,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.524, -0.171,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.524, -0.171,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.524, -0.171,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.493, -0.168,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.493, -0.168,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.524, -0.171,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.554, -0.168,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.554, -0.168,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.554, -0.168,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.524, -0.171,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.524, -0.171,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.554, -0.168,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.584, -0.160,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.584, -0.160,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.584, -0.160,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.554, -0.168,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.554, -0.168,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.584, -0.160,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.611, -0.147,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.611, -0.147,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.611, -0.147,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.584, -0.160,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.584, -0.160,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.611, -0.147,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.635, -0.129,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.635, -0.129,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.635, -0.129,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.611, -0.147,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.611, -0.147,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.635, -0.129,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.6693, -0.084,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.6693, -0.084,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.6693, -0.084,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.635, -0.129,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.635, -0.129,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.6693, -0.084,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.678, -0.057,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.678, -0.057,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.678, -0.057,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.6693, -0.084,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.6693, -0.084,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.678, -0.057,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.681, -0.030,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.681, -0.030,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.681, -0.030,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.678, -0.057,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.678, -0.057,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.681, -0.030,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.678, -0.002,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.678, -0.002,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.678, -0.002,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.681, -0.030,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.681, -0.030,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.678, -0.002,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.669, 0.023,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.669, 0.023,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.669, 0.023,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.678, -0.002,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.678, -0.002,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.669, 0.023,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.654, 0.047,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.654, 0.047,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.654, 0.047,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.669, 0.023,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.669, 0.023,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.654, 0.047,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.635, 0.069,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.635, 0.069,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.635, 0.069,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.654, 0.047,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.654, 0.047,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.635, 0.069,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.611, 0.086,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.611, 0.086,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.611, 0.086,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.635, 0.069,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.635, 0.069,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.611, 0.086,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.584, 0.099,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.584, 0.099,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.584, 0.099,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.611, 0.086,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.611, 0.086,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.584, 0.099,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.555, 0.107,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.555, 0.107,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.555, 0.107,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.584, 0.099,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.584, 0.099,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,

    -0.555, 0.107,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.524, 0.110,-0.115, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.524, 0.110,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.524, 0.110,-0.215, 0.2, 0.2, 0.2 ,0 ,1, 0,
    -0.555, 0.107,-0.215, 0.2, 0.2, 0.2, 0 , 1 , 0,
    -0.555, 0.107,-0.115, 0.2, 0.2, 0.2, 0 , 1 , 0,
];

let vertexDataGabung = [...vertexData, ...cubeVertex];
let vertexDataMetalGabung= [...vertexDataMetal, ...cubeVertex];

const vertexShader = gl.createShader(gl.VERTEX_SHADER);
gl.shaderSource(
  vertexShader,
  `
    precision mediump float;
    attribute vec3 aPosition;
    attribute vec3 aColor;
    attribute vec3 aNormal;
    varying vec3 vPosition;
    varying vec3 vColor;
    varying vec3 vNormal;  
    uniform mat4 uModel;
    uniform mat4 uView;
    uniform mat4 uProjection;
    void main() {
      vec4 originalPosition = vec4(aPosition, 1.0);
      gl_Position = uProjection * uView * uModel * originalPosition;
      vPosition = (uModel * originalPosition).xyz;
      vColor = aColor;
      vNormal = aNormal;
    }
  `
);
gl.compileShader(vertexShader);
console.log(gl.getShaderInfoLog(vertexShader));

const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
gl.shaderSource(
  fragmentShader,
  `
    precision mediump float;
    varying vec3 vPosition;
    varying vec3 vColor;
    varying vec3 vNormal;
    uniform vec3 uAmbientConstant;   // Represents the light color
    uniform float uAmbientIntensity;
    uniform vec3 uDiffuseConstant;  // Represents the light color
    uniform vec3 uLightPosition;
    uniform mat3 uNormalModel;
    uniform vec3 uSpecularConstant; // Represents the light color
    uniform vec3 uViewerPosition;
    void main() {
        // Calculate the ambient effect
        vec3 ambient = uAmbientConstant * uAmbientIntensity;
        // Calculate the diffuse effect
        vec3 normalizedNormal = normalize(uNormalModel * vNormal);
        vec3 vLight = uLightPosition - vPosition;
        vec3 normalizedLight = normalize(vLight);
        vec3 diffuse = vec3(0., 0., 0.);
        float cosTheta = max(dot(normalizedNormal, normalizedLight), 0.);
        
        // Prepare the specular components
        vec3 vReflector = 2.0 * cosTheta * vNormal - (vLight);
        // or using the following expression
        // vec3 vReflector = reflect(-vLight, vNormal);
        vec3 vViewer = uViewerPosition - vPosition;
        vec3 normalizedViewer = normalize(vViewer);
        vec3 normalizedReflector = normalize(vReflector);
        float shininessConstant = 100.0;
        vec3 specular = vec3(0., 0., 0.);
        float cosPhi = max(dot(normalizedViewer, normalizedReflector), 0.);
        
        // Calculate the phong reflection effect
        if (cosTheta > 0.) {
            diffuse = uDiffuseConstant * cosTheta;
        }
        if (cosPhi > 0.) {
            specular = uSpecularConstant * pow(cosPhi, shininessConstant);
        }
        vec3 phong = ambient + diffuse + specular;
        // Apply the shading
        gl_FragColor = vec4(phong * vColor, 1.);
        gl_FragColor.w = 0.5;
    }
  `
);
gl.compileShader(fragmentShader);
console.log(gl.getShaderInfoLog(fragmentShader));

const fragmentShaderforMetal = gl.createShader(gl.FRAGMENT_SHADER);
gl.shaderSource(
  fragmentShaderforMetal,
  `
    precision mediump float;
    varying vec3 vPosition;
    varying vec3 vColor;
    varying vec3 vNormal;
    uniform vec3 uAmbientConstant;   // Represents the light color
    uniform float uAmbientIntensity;
    uniform vec3 uDiffuseConstant;  // Represents the light color
    uniform vec3 uLightPosition;
    uniform mat3 uNormalModel;
    uniform vec3 uSpecularConstant; // Represents the light color
    uniform vec3 uViewerPosition;
    void main() {
        // Calculate the ambient effect
        vec3 ambient = uAmbientConstant * uAmbientIntensity;
        // Calculate the diffuse effect
        vec3 normalizedNormal = normalize(uNormalModel * vNormal);
        vec3 vLight = uLightPosition - vPosition;
        vec3 normalizedLight = normalize(vLight);
        vec3 diffuse = vec3(0., 0., 0.);
        float cosTheta = max(dot(normalizedNormal, normalizedLight), 0.);
        
        // Prepare the specular components
        vec3 vReflector = 2.0 * cosTheta * vNormal - (vLight);
        // or using the following expression
        // vec3 vReflector = reflect(-vLight, vNormal);
        vec3 vViewer = uViewerPosition - vPosition;
        vec3 normalizedViewer = normalize(vViewer);
        vec3 normalizedReflector = normalize(vReflector);
        float shininessConstant = 100.0;
        vec3 specular = vec3(0., 0., 0.);
        float cosPhi = max(dot(normalizedViewer, normalizedReflector), 0.);
        
        // Calculate the phong reflection effect
        if (cosTheta > 0.) {
            diffuse = uDiffuseConstant * cosTheta;
        }
        if (cosPhi > 0.) {
            specular = uSpecularConstant * pow(cosPhi, shininessConstant);
        }
        vec3 phong = ambient + diffuse + specular;
        // Apply the shading
        gl_FragColor = vec4(phong * vColor, 1.);
    }
  `
);
gl.compileShader(fragmentShaderforMetal);
console.log(gl.getShaderInfoLog(fragmentShaderforMetal));

const program = gl.createProgram();
gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);
gl.linkProgram(program);

const programMetal = gl.createProgram();
gl.attachShader(programMetal, vertexShader)
gl.attachShader(programMetal, fragmentShaderforMetal);
gl.linkProgram(programMetal);

let lightX = 0.0;
let lightY = 0.0;
let lightZ = 0.0;

let cameraX = 0.0;
let cameraY = 0.0;
let cameraZ = 2.0;

gl.useProgram(program);
let uView = gl.getUniformLocation(program, "uView");
let uLightPosition = gl.getUniformLocation(program, "uLightPosition");
let viewMatrix = glMatrix.mat4.create();
glMatrix.mat4.lookAt(
  viewMatrix,
  [cameraX, cameraY, cameraZ],    // the location of the eye or the camera
  [cameraX, 0.0, -10],        // the point where the camera look at
  [0.0, 1.0, 0.0]
);
gl.uniformMatrix4fv(uView, false, viewMatrix);

gl.useProgram(programMetal);
let uViewMetal = gl.getUniformLocation(programMetal, "uView");
let uLightPositionMetal = gl.getUniformLocation(programMetal, "uLightPosition");
let viewMatrixMetal = glMatrix.mat4.create();
glMatrix.mat4.lookAt(
  viewMatrixMetal,
  [cameraX, cameraY, cameraZ],    // the location of the eye or the camera
  [cameraX, 0.0, -10],        // the point where the camera look at
  [0.0, 1.0, 0.0]
);
gl.uniformMatrix4fv(uViewMetal, false, viewMatrixMetal);


let modelMatrix = glMatrix.mat4.create();
let modelMatrixMetal = glMatrix.mat4.create();
var rotationMatrix = glMatrix.mat4.create();
  var dragging;
  function onMouseDown(event) {
      var x = event.clientX;
      var y = event.clientY;
      var rect = event.target.getBoundingClientRect();
      // When the mouse pointer is inside the frame
      if (
          rect.left <= x &&
          rect.right >= x &&
          rect.top <= y &&
          rect.bottom >= y
      ) {
          dragging = true;
      }
      lastPointOnTrackBall = getProjectionPointOnSurface(glMatrix.vec3.fromValues(x, y, 0));
      currentPointOnTrackBall = lastPointOnTrackBall;
  }
  function onMouseUp(event) {
      dragging = false;
      if (currentPointOnTrackBall != lastPointOnTrackBall) {
          lastQuat = computeCurrentQuat();
      }
  }
  function onMouseMove(event) {
      if (dragging) {
          var x = event.clientX;
          var y = event.clientY;
          currentPointOnTrackBall = getProjectionPointOnSurface(glMatrix.vec3.fromValues(x, y, 0));
          glMatrix.mat4.fromQuat(rotationMatrix, computeCurrentQuat());
      }
  }
  document.addEventListener('mousedown', onMouseDown);
  document.addEventListener('mouseup', onMouseUp);
  document.addEventListener('mousemove', onMouseMove);

let lightsOn = true

function onKeydown(event) {
  if(event.keyCode == 32 )
  {
    lightsOn = !lightsOn
  }
  if(event.keyCode == 38)
  {
    cameraZ -= 0.02; //L
  }
  if(event.keyCode == 40)
  {
    cameraZ += 0.02; //R
  }
  if (event.keyCode == 87) { //W
    lightZ -= 0.02;
    for(let i=0;i<cubeVertex.length;i+=9)
    {
      cubeVertex[i+2]-=0.02;
    }
  }
  else if (event.keyCode == 65) { //A
    lightX -= 0.02;
    for(let i=0;i<cubeVertex.length;i+=9)
    {
      cubeVertex[i]-=0.02;
    }
  }
  if (event.keyCode == 83) { //S
    lightZ += 0.02;
    for(let i=0;i<cubeVertex.length;i+=9)
    {
      cubeVertex[i+2]+=0.02;
    }
  } 
  if (event.keyCode == 68) { //D
    lightX += 0.02;
    for(let i=0;i<cubeVertex.length;i+=9)
    {
      cubeVertex[i]+=0.02;
    }
  }

  function rotate(cx, cy, x, y, angle) {
    var radians = (Math.PI / 180) * angle,
      cos = Math.cos(radians),
      sin = Math.sin(radians),
      nx = (cos * (x - cx)) + (sin * (y - cy)) + cx,
      ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;
    return [nx, ny];
  }

  if(event.keyCode == 37)
  {
    var cameraXZ = rotate(0.0, 0.0, cameraX, cameraZ, -5);
    cameraX = cameraXZ[0];
    cameraZ = cameraXZ[1];
  }
  if(event.keyCode == 39)
  {
    var cameraXZ = rotate(0.0, 0.0, cameraX, cameraZ, 5);
    cameraX = cameraXZ[0];
    cameraZ = cameraXZ[1];
  }

  vertexDataGabung = [...vertexData,...cubeVertex];
  vertexDataMetalGabung = [...vertexDataMetal, ...cubeVertex];

  glMatrix.mat4.lookAt(
    viewMatrix,
    [cameraX, cameraY, cameraZ],    // the location of the eye or the camera
    [cameraX, 0.0, -10],        // the point where the camera look at
    [0.0, 1.0, 0.0]
  );
  glMatrix.mat4.lookAt(
    viewMatrixMetal,
    [cameraX, cameraY, cameraZ],    // the location of the eye or the camera
    [cameraX, 0.0, -10],        // the point where the camera look at
    [0.0, 1.0, 0.0]
  );
}

document.addEventListener("keydown", onKeydown);

function renderProgram(currShader, currVertice, isMetal) 
{
  gl.useProgram(currShader);
  gl.enable(gl.DEPTH_TEST);

  if (isMetal)
  {
    gl.uniformMatrix4fv(uViewMetal, false, viewMatrixMetal);
  }
  else
  {
    gl.uniformMatrix4fv(uView, false, viewMatrix);
  }

  const vertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(currVertice), gl.STATIC_DRAW);

  const aPosition = gl.getAttribLocation(currShader, `aPosition`);
  gl.enableVertexAttribArray(aPosition);
  gl.vertexAttribPointer(
    aPosition,
    3,
    gl.FLOAT,
    false,
    9 * Float32Array.BYTES_PER_ELEMENT,
    0
  );

  const aColor = gl.getAttribLocation(currShader, `aColor`);
  gl.enableVertexAttribArray(aColor);
  gl.vertexAttribPointer(
    aColor,
    3,
    gl.FLOAT,
    false,
    9 * Float32Array.BYTES_PER_ELEMENT,
    3 * Float32Array.BYTES_PER_ELEMENT
  );

  const aNormal = gl.getAttribLocation(currShader, `aNormal`);
  gl.enableVertexAttribArray(aNormal);
  gl.vertexAttribPointer(
    aNormal,
    3,
    gl.FLOAT,
    false,
    9 * Float32Array.BYTES_PER_ELEMENT,
    6 * Float32Array.BYTES_PER_ELEMENT
  );

  // Lighting and Shading
  // AMBIENT
  let uAmbientConstant = gl.getUniformLocation(currShader, "uAmbientConstant");
  let uAmbientIntensity = gl.getUniformLocation(currShader, "uAmbientIntensity");
  gl.uniform3fv(uAmbientConstant, [1.0, 1.0, 1.0]);       // white light
  gl.uniform1f(uAmbientIntensity, 0.386); // 20% of light

  // DIFFUSE
  let uDiffuseConstant = gl.getUniformLocation(currShader, "uDiffuseConstant");
  let uNormalModel = gl.getUniformLocation(currShader, "uNormalModel");
  if (isMetal)
  {
    if(lightsOn == true)
    {
      gl.uniform3fv(uDiffuseConstant, [1.0, 1.0, 1.0]);   // white light
    }
    else
    {
      gl.uniform3fv(uDiffuseConstant, [0.0, 0.0, 0.0]);   // no light
    }
    gl.uniform3fv(uLightPositionMetal, [lightX, lightY, lightZ]);  // light position
  }
  else
  {
    if(lightsOn == true)
    {
      gl.uniform3fv(uDiffuseConstant, [1.0, 1.0, 1.0]);   // white light
    }
    else
    {
      gl.uniform3fv(uDiffuseConstant, [0.0, 0.0, 0.0]);   // no light
    }
    gl.uniform3fv(uLightPosition, [lightX, lightY, lightZ])
  }

  // Perspective projection
  var uProjection = gl.getUniformLocation(currShader, "uProjection");
  var perspectiveMatrix = glMatrix.mat4.create();
  glMatrix.mat4.perspective(perspectiveMatrix, Math.PI/3, 1.0, 0.5, 10.0);
  gl.uniformMatrix4fv(uProjection, false, perspectiveMatrix);

  // Interactive orbital rotation with mouse using quaternion concept
  var lastPointOnTrackBall, currentPointOnTrackBall;
  var lastQuat = glMatrix.quat.create();
  function computeCurrentQuat() {
      // Secara berkala hitung quaternion rotasi setiap ada perubahan posisi titik pointer mouse
      var axisFromCrossProduct = glMatrix.vec3.cross(glMatrix.vec3.create(), lastPointOnTrackBall, currentPointOnTrackBall);
      var angleFromDotProduct = Math.acos(glMatrix.vec3.dot(lastPointOnTrackBall, currentPointOnTrackBall));
      var rotationQuat = glMatrix.quat.setAxisAngle(glMatrix.quat.create(), axisFromCrossProduct, angleFromDotProduct);
      glMatrix.quat.normalize(rotationQuat, rotationQuat);
      return glMatrix.quat.multiply(glMatrix.quat.create(), rotationQuat, lastQuat);
  }
  // Memproyeksikan pointer mouse agar jatuh ke permukaan ke virtual trackball
  function getProjectionPointOnSurface(point) {
      var radius = canvas.width/3;  // Jari-jari virtual trackball kita tentukan sebesar 1/3 lebar kanvas
      var center = glMatrix.vec3.fromValues(canvas.width/2, canvas.height/2, 0);  // Titik tengah virtual trackball
      var pointVector = glMatrix.vec3.subtract(glMatrix.vec3.create(), point, center);
      pointVector[1] = pointVector[1] * (-1); // Flip nilai y, karena koordinat piksel makin ke bawah makin besar
      var radius2 = radius * radius;
      var length2 = pointVector[0] * pointVector[0] + pointVector[1] * pointVector[1];
      if (length2 <= radius2) pointVector[2] = Math.sqrt(radius2 - length2); // Dapatkan nilai z melalui rumus Pytagoras
      else {  // Atur nilai z sebagai 0, lalu x dan y sebagai paduan Pytagoras yang membentuk sisi miring sepanjang radius
          pointVector[0] *= radius / Math.sqrt(length2);
          pointVector[1] *= radius / Math.sqrt(length2);
          pointVector[2] = 0;
      }
      return glMatrix.vec3.normalize(glMatrix.vec3.create(), pointVector);
  }

  // SPECULAR
  var uSpecularConstant = gl.getUniformLocation(currShader, "uSpecularConstant");
  var uViewerPosition = gl.getUniformLocation(currShader, "uViewerPosition");
  if(lightsOn == true)
  {
    gl.uniform3fv(uSpecularConstant, [1.0, 1.0, 1.0]);  // white light
  }
  else
  {
    gl.uniform3fv(uSpecularConstant, [0.0, 0.0, 0.0]);  // white ligh
  }
  gl.uniform3fv(uViewerPosition, [cameraX, cameraY, cameraZ]);

  let uModel = gl.getUniformLocation(currShader, `uModel`);
  
  if (isMetal) 
  {
    gl.uniformMatrix4fv(uModel, false, modelMatrixMetal);

    let normalModelMatrix = glMatrix.mat3.create();
    glMatrix.mat3.normalFromMat4(normalModelMatrix, modelMatrixMetal);
    gl.uniformMatrix3fv(uNormalModel, false, normalModelMatrix);
  } 
  else 
  {
    gl.uniformMatrix4fv(uModel, false, modelMatrix);
    let normalModelMatrix = glMatrix.mat3.create();
    glMatrix.mat3.normalFromMat4(normalModelMatrix, modelMatrix);
    gl.uniformMatrix3fv(uNormalModel, false, normalModelMatrix);
  }

  gl.enable(gl.DEPTH_TEST);
  gl.drawArrays(gl.TRIANGLES, 0, vertexDataGabung.length / 9);

}

function animate() {
  gl.clearColor(0.0, 0.0, 0.0, 0.2);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  renderProgram(programMetal, vertexDataMetalGabung, true);
  renderProgram(program, vertexDataGabung, false);
  requestAnimationFrame(animate);
}

animate();
